{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05D0\\u05EA\\u05E8\\u05D0\\\\Desktop\\\\LeaderFinalProject-master\\\\react\\\\src\\\\components\\\\InfiniteScroll.js\";\nimport React from 'react';\nimport { FlatList } from \"react-native-bidirectional-infinite-scroll\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InfiniteScroll() {\n  let numbers = [0, 1, 2, 3];\n\n  const onStartReached = () => {\n    console.log(\"1\");\n  };\n\n  const onEndReached = () => {\n    console.log(\"2\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FlatList, {\n      data: numbers,\n      renderItem: ListItem,\n      keyExtractor: item => item.toString(),\n      onStartReached: onStartReached // required, should return a promise\n      ,\n      onEndReached: onEndReached // required, should return a promise\n      ,\n      showDefaultLoadingIndicators: true // optional\n      ,\n      onStartReachedThreshold: 10 // optional\n      ,\n      onEndReachedThreshold: 10 // optional\n      ,\n      activityIndicatorColor: 'black' // optional\n      ,\n      HeaderLoadingIndicator: () => {\n        /** Your loading indicator */\n      } // optional\n      ,\n      FooterLoadingIndicator: () => {\n        /** Your loading indicator */\n      } // optional\n      ,\n      enableAutoscrollToTop: false // optional | default - false\n      // You can use any other prop on react-native's FlatList\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 8\n    }, this)\n  }, void 0, false);\n}\n_c = InfiniteScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"sources":["C:/Users/אתרא/Desktop/LeaderFinalProject-master/react/src/components/InfiniteScroll.js"],"names":["React","FlatList","InfiniteScroll","numbers","onStartReached","console","log","onEndReached","ListItem","item","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,4CAAzB;;;AACA,eAAe,SAASC,cAAT,GAA0B;AACrC,MAAIC,OAAO,GAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,CAAZ;;AACA,QAAMC,cAAc,GAAC,MAAI;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,GAFD;;AAGA,QAAMC,YAAY,GAAC,MAAI;AACnBF,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,GAFH;;AAIA,sBACI;AAAA,2BACD,QAAC,QAAD;AACH,MAAA,IAAI,EAAEH,OADH;AAEH,MAAA,UAAU,EAAEK,QAFT;AAGH,MAAA,YAAY,EAAGC,IAAD,IAAUA,IAAI,CAACC,QAAL,EAHrB;AAIH,MAAA,cAAc,EAAEN,cAJb,CAI6B;AAJ7B;AAKH,MAAA,YAAY,EAAEG,YALX,CAKyB;AALzB;AAMH,MAAA,4BAA4B,EAAE,IAN3B,CAMiC;AANjC;AAOH,MAAA,uBAAuB,EAAE,EAPtB,CAO0B;AAP1B;AAQH,MAAA,qBAAqB,EAAE,EARpB,CAQwB;AARxB;AASH,MAAA,sBAAsB,EAAE,OATrB,CAS8B;AAT9B;AAUH,MAAA,sBAAsB,EAAE,MAAM;AAAE;AAA+B,OAV5D,CAU8D;AAV9D;AAWH,MAAA,sBAAsB,EAAE,MAAM;AAAE;AAA+B,OAX5D,CAW8D;AAX9D;AAYH,MAAA,qBAAqB,EAAE,KAZpB,CAY2B;AAC9B;;AAbG;AAAA;AAAA;AAAA;AAAA;AADC,mBADJ;AAmBH;KA5BuBL,c","sourcesContent":["import React from 'react';\r\nimport { FlatList } from \"react-native-bidirectional-infinite-scroll\";\r\nexport default function InfiniteScroll() {\r\n    let numbers=[0,1,2,3]\r\n    const onStartReached=()=>{\r\n      console.log(\"1\")\r\n    }\r\n    const onEndReached=()=>{\r\n        console.log(\"2\")\r\n      }\r\n\r\n    return (\r\n        <>\r\n       <FlatList\r\n    data={numbers}\r\n    renderItem={ListItem}\r\n    keyExtractor={(item) => item.toString()}\r\n    onStartReached={onStartReached} // required, should return a promise\r\n    onEndReached={onEndReached} // required, should return a promise\r\n    showDefaultLoadingIndicators={true} // optional\r\n    onStartReachedThreshold={10} // optional\r\n    onEndReachedThreshold={10} // optional\r\n    activityIndicatorColor={'black'} // optional\r\n    HeaderLoadingIndicator={() => { /** Your loading indicator */ }} // optional\r\n    FooterLoadingIndicator={() => { /** Your loading indicator */ }} // optional\r\n    enableAutoscrollToTop={false} // optional | default - false\r\n    // You can use any other prop on react-native's FlatList\r\n/>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}